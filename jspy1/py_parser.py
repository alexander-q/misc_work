#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__all__ = [
    'PythonParser',
    'PythonSemantics',
    'main'
]

KEYWORDS = {}


class PythonBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=re.compile('((?!^)(?![\\r\\n])\\s)+', RE_FLAGS | re.DOTALL),
        nameguard=None,
        comments_re=None,
        eol_comments_re='#[^\\r\\n]*',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(PythonBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class PythonParser(Parser):
    def __init__(
        self,
        whitespace=re.compile('((?!^)(?![\\r\\n])\\s)+', RE_FLAGS | re.DOTALL),
        nameguard=None,
        comments_re=None,
        eol_comments_re='#[^\\r\\n]*',
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=PythonBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(PythonParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _start_(self):
        self._file_input_()

    @graken()
    def _single_input_(self):
        with self._choice():
            with self._option():
                self._NEWLINE_()
            with self._option():
                self._simple_stmt_()
            with self._option():
                self._compound_stmt_()
                self._NEWLINE_()
            self._error('no available options')

    @graken()
    def _file_input_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._NEWLINE_()
                with self._option():
                    self._stmt_()
                    self.name_last_node('@')
                self._error('no available options')
        self._closure(block0)

    @graken()
    def _eval_input_(self):

        def block0():
            self._NEWLINE_()
        self._closure(block0)
        self._testlist_()
        self.name_last_node('@')

        def block2():
            self._NEWLINE_()
        self._closure(block2)

    @graken()
    def _decorators_(self):

        def block0():
            self._decorator_()
        self._positive_closure(block0)

    @graken('Decorator')
    def _decorator_(self):
        self._token('@')
        self._dotted_attr_()
        with self._optional():
            self._token('(')
            self._cut()
            with self._optional():
                self._arglist_()
            self._token(')')
        self._NEWLINE_()

    @graken()
    def _dotted_attr_(self):

        def sep0():
            self._token('.')

        def block0():
            self._name_()
        self._closure(block0, sep=sep0)

    @graken('FuncDef')
    def _funcdef_(self):
        #print 'IN FUNC DEF'
        with self._optional():
            self._decorators_()
        self._token('def')
        self._cut()
        self._name_()
        self._parameters_()
        self._token(':')
        self._cut()
        self._suite_()

    @graken()
    def _parameters_(self):
        self._token('(')
        self._cut()
        with self._optional():
            self._varargslist_()
        self._token(')')

    @graken()
    def _varargslist_(self):
        with self._choice():
            with self._option():

                def sep0():
                    self._token(',')

                def block0():
                    self._defparameter_()
                self._closure(block0, sep=sep0)
                with self._optional():
                    self._token(',')
                    self._token('*')
                    self._cut()
                    self._name_()
                with self._optional():
                    self._token(',')
                    self._token('**')
                    self._cut()
                    self._name_()
            with self._option():
                self._token('*')
                self._cut()
                self._name_()
                with self._optional():
                    self._token(',')
                    self._token('**')
                    self._cut()
                    self._name_()
            with self._option():
                self._token('**')
                self._cut()
                self._name_()
            self._error('no available options')

    @graken()
    def _defparameter_(self):
        self._fpdef_()
        with self._optional():
            self._token('=')
            self._cut()
            self._test_()

    @graken()
    def _fpdef_(self):
        with self._choice():
            with self._option():
                self._name_()
            with self._option():
                self._token('(')
                self._cut()
                self._fplist_()
                self._token(')')
            self._error('no available options')

    @graken()
    def _fplist_(self):

        def sep0():
            self._token(',')

        def block0():
            self._fpdef_()
        self._closure(block0, sep=sep0)
        with self._optional():
            self._token(',')
            self._cut()

    @graken('Statement')
    def _stmt_(self):
        with self._choice():
            with self._option():
                self._simple_stmt_()
            with self._option():
                self._compound_stmt_()
            self._error('no available options')

    @graken()
    def _simple_stmt_(self):

        def sep0():
            self._token(';')

        def block0():
            self._small_stmt_()
        self._closure(block0, sep=sep0)
        with self._optional():
            self._token(';')
            self._cut()
        self._NEWLINE_()

    @graken()
    def _small_stmt_(self):
        with self._choice():
            with self._option():
                self._expr_stmt_()
            with self._option():
                self._print_stmt_()
            with self._option():
                self._del_stmt_()
            with self._option():
                self._pass_stmt_()
            with self._option():
                self._flow_stmt_()
            with self._option():
                self._import_stmt_()
            with self._option():
                self._global_stmt_()
            with self._option():
                self._exec_stmt_()
            with self._option():
                self._assert_stmt_()
            self._error('no available options')

    @graken()
    def _expr_stmt_(self):
        self._testlist_()
        with self._optional():
            with self._choice():
                with self._option():
                    self._augassign_()
                    self._yield_expr_()
                with self._option():
                    self._augassign_()
                    self._testlist_()
                with self._option():
                    self._assigns_()
                self._error('no available options')

    @graken()
    def _assigns_(self):
        with self._choice():
            with self._option():

                def block0():
                    self._assign_testlist_()
                self._positive_closure(block0)
            with self._option():

                def block1():
                    self._assign_yield_()
                self._positive_closure(block1)
            self._error('no available options')

    @graken()
    def _assign_testlist_(self):
        self._token('=')
        self._testlist_()

    @graken()
    def _assign_yield_(self):
        self._token('=')
        self._yield_expr_()

    @graken()
    def _augassign_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('+=')
                with self._option():
                    self._token('-=')
                with self._option():
                    self._token('*=')
                with self._option():
                    self._token('/=')
                with self._option():
                    self._token('%=')
                with self._option():
                    self._token('&=')
                with self._option():
                    self._token('|=')
                with self._option():
                    self._token('^=')
                with self._option():
                    self._token('<<=')
                with self._option():
                    self._token('>>=')
                with self._option():
                    self._token('**=')
                with self._option():
                    self._token('//=')
                self._error('expecting one of: %= &= **= *= += -= //= /= <<= >>= ^= |=')
        self._cut()

    @graken()
    def _print_stmt_(self):
        self._token('print')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('(')
                    self._cut()
                    self._arglist_()
                    self._token(')')
                    self._cut()
                with self._option():
                    with self._optional():
                        with self._choice():
                            with self._option():
                                self._printlist_()
                            with self._option():
                                self._token('>>')
                                self._cut()
                                self._printlist_()
                            self._error('no available options')
                self._error('no available options')

    @graken()
    def _printlist_(self):

        def sep0():
            self._token(',')

        def block0():
            self._test_()
        self._closure(block0, sep=sep0)
        with self._optional():
            self._token(',')
            self._cut()

    @graken()
    def _del_stmt_(self):
        self._token('del')
        self._cut()
        self._exprlist_()

    @graken()
    def _pass_stmt_(self):
        self._token('pass')
        self._cut()

    @graken()
    def _flow_stmt_(self):
        with self._choice():
            with self._option():
                self._break_stmt_()
            with self._option():
                self._continue_stmt_()
            with self._option():
                self._return_stmt_()
            with self._option():
                self._raise_stmt_()
            with self._option():
                self._yield_stmt_()
            self._error('no available options')

    @graken()
    def _break_stmt_(self):
        self._token('break')
        self._cut()

    @graken()
    def _continue_stmt_(self):
        self._token('continue')
        self._cut()

    @graken()
    def _return_stmt_(self):
        self._token('return')
        self._cut()
        with self._optional():
            self._testlist_()

    @graken()
    def _yield_stmt_(self):
        self._yield_expr_()

    @graken()
    def _raise_stmt_(self):
        self._token('raise')
        self._cut()
        with self._optional():
            self._test_()
            with self._optional():
                self._token(',')
                self._cut()
                self._test_()
                with self._optional():
                    self._token(',')
                    self._cut()
                    self._test_()

    @graken()
    def _import_stmt_(self):
        with self._choice():
            with self._option():
                self._import_name_()
            with self._option():
                self._import_from_()
            self._error('no available options')

    @graken()
    def _import_name_(self):
        self._token('import')
        self._cut()
        self._dotted_as_names_()

    @graken()
    def _import_from_(self):
        self._token('from')
        with self._group():
            with self._choice():
                with self._option():

                    def block0():
                        self._token('.')
                        self._cut()
                    self._closure(block0)
                    self._dotted_name_()
                with self._option():

                    def block1():
                        self._token('.')
                        self._cut()
                    self._positive_closure(block1)
                self._error('expecting one of: .')
        self._token('import')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('*')
                    self._cut()
                with self._option():
                    self._import_as_names_()
                with self._option():
                    self._token('(')
                    self._cut()
                    self._import_as_names_()
                    self._token(')')
                self._error('expecting one of: *')

    @graken()
    def _import_as_names_(self):

        def sep0():
            self._token(',')

        def block0():
            self._import_as_name_()
        self._closure(block0, sep=sep0)
        with self._optional():
            self._token(',')
            self._cut()

    @graken()
    def _import_as_name_(self):
        self._name_()
        with self._optional():
            self._token('as')
            self._cut()
            self._name_()

    @graken()
    def _dotted_as_name_(self):
        self._dotted_name_()
        with self._optional():
            self._token('as')
            self._cut()
            self._name_()

    @graken()
    def _dotted_as_names_(self):

        def sep0():
            self._token(',')

        def block0():
            self._dotted_as_name_()
        self._closure(block0, sep=sep0)

    @graken()
    def _name_(self):
        self._NAME_()

    @graken()
    def _dotted_name_(self):

        def sep0():
            self._token('.')

        def block0():
            self._NAME_()
        self._closure(block0, sep=sep0)

    @graken()
    def _global_stmt_(self):
        self._token('global')
        self._cut()

        def sep0():
            self._token(',')

        def block0():
            self._name_()
        self._closure(block0, sep=sep0)

    @graken()
    def _exec_stmt_(self):
        self._token('exec')
        self._cut()
        self._expr_()
        with self._optional():
            self._token('in')
            self._cut()
            self._test_()
            with self._optional():
                self._token(',')
                self._cut()
                self._test_()

    @graken('Assert')
    def _assert_stmt_(self):
        self._token('assert')
        self._cut()
        self._test_()
        with self._optional():
            self._token(',')
            self._cut()
            self._test_()

    @graken()
    def _compound_stmt_(self):
        with self._choice():
            with self._option():
                self._if_stmt_()
            with self._option():
                self._while_stmt_()
            with self._option():
                self._for_stmt_()
            with self._option():
                self._try_stmt_()
            with self._option():
                self._with_stmt_()
            with self._option():
                self._funcdef_()
            with self._option():
                self._classdef_()
            self._error('no available options')

    @graken()
    def _if_stmt_(self):
        self._token('if')
        self._cut()
        self._test_()
        self._token(':')
        self._cut()
        self._suite_()

        def block0():
            self._elif_clause_()
        self._closure(block0)
        with self._optional():
            self._token('else')
            self._cut()
            self._token(':')
            self._suite_()

    @graken()
    def _elif_clause_(self):
        self._token('elif')
        self._cut()
        self._test_()
        self._token(':')
        self._cut()
        self._suite_()

    @graken()
    def _while_stmt_(self):
        self._token('while')
        self._cut()
        self._test_()
        self._token(':')
        self._cut()
        self._suite_()
        with self._optional():
            self._token('else')
            self._cut()
            self._token(':')
            self._suite_()

    @graken()
    def _for_stmt_(self):
        self._token('for')
        self._cut()
        self._exprlist_()
        self._token('in')
        self._cut()
        self._testlist_()
        self._token(':')
        self._cut()
        self._suite_()
        with self._optional():
            self._token('else')
            self._cut()
            self._token(':')
            self._suite_()

    @graken()
    def _try_stmt_(self):
        self._token('try')
        self._cut()
        self._token(':')
        self._suite_()
        with self._group():
            with self._choice():
                with self._option():

                    def block0():
                        self._except_clause_()
                    self._positive_closure(block0)
                    with self._optional():
                        self._token('else')
                        self._cut()
                        self._token(':')
                        self._suite_()
                    with self._optional():
                        self._token('finally')
                        self._cut()
                        self._token(':')
                        self._suite_()
                with self._option():
                    self._token('finally')
                    self._cut()
                    self._token(':')
                    self._suite_()
                self._error('no available options')

    @graken()
    def _with_stmt_(self):
        self._token('with')
        self._cut()
        self._test_()
        with self._optional():
            self._with_var_()
        self._token(':')
        self._cut()
        self._suite_()

    @graken()
    def _with_var_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('as')
                    self._cut()
                with self._option():
                    self._name_()
                self._error('expecting one of: as')
        self._expr_()

    @graken()
    def _except_clause_(self):
        self._token('except')
        self._cut()
        with self._optional():
            self._test_()
            with self._optional():
                self._token(',')
                self._cut()
                self._test_()
        self._token(':')
        self._cut()
        self._suite_()

    @graken()
    def _suite_(self):
        with self._choice():
            with self._option():
                self._simple_stmt_()
            with self._option():
                self._NEWLINE_()
                self._cut()
                self._INDENT_()
                self._cut()

                def block0():
                    self._stmt_()
                self._positive_closure(block0)
                self._DEDENT_()
                self._cut()
            self._error('no available options')

    @graken()
    def _INDENT_(self):
        self._pattern(r'^((?![\r\n])\s)+')

    @graken()
    def _DEDENT_(self):
        self._pattern(r'^((?![\r\n])\s)*')

    @graken()
    def _test_(self):
        with self._choice():
            with self._option():
                self._or_test_()
                with self._optional():
                    self._token('if')
                    self._cut()
                    self._or_test_()
                    self._token('else')
                    self._cut()
                    self._test_()
            with self._option():
                self._lambdef_()
            self._error('no available options')

    @graken()
    def _or_test_(self):

        def sep0():
            self._token('or')

        def block0():
            self._and_test_()
        self._closure(block0, sep=sep0)

    @graken()
    def _and_test_(self):

        def sep0():
            self._token('and')

        def block0():
            self._not_test_()
        self._closure(block0, sep=sep0)

    @graken()
    def _not_test_(self):
        with self._choice():
            with self._option():
                self._token('not')
                self._cut()
                self._not_test_()
            with self._option():
                self._comparison_()
            self._error('no available options')

    @graken()
    def _comparison_(self):

        def sep0():
            with self._group():
                self._comp_op_()

        def block0():
            self._expr_()
        self._closure(block0, sep=sep0)

    @graken()
    def _comp_op_(self):
        with self._choice():
            with self._option():
                self._token('<=')
            with self._option():
                self._token('<>')
            with self._option():
                self._token('<')
            with self._option():
                self._token('>=')
            with self._option():
                self._token('>')
            with self._option():
                self._token('==')
            with self._option():
                self._token('!=')
            with self._option():
                self._token('in')
            with self._option():
                self._token('not')
                self._token('in')
            with self._option():
                self._token('is')
                self._token('not')
            with self._option():
                self._token('is')
            self._error('expecting one of: != < <= <> == > >= in is not')

    @graken()
    def _expr_(self):

        def sep0():
            self._token('|')

        def block0():
            self._xor_expr_()
        self._closure(block0, sep=sep0)

    @graken()
    def _xor_expr_(self):

        def sep0():
            self._token('^')

        def block0():
            self._and_expr_()
        self._closure(block0, sep=sep0)

    @graken()
    def _and_expr_(self):

        def sep0():
            self._token('&')

        def block0():
            self._shift_expr_()
        self._closure(block0, sep=sep0)

    @graken()
    def _shift_expr_(self):

        def sep0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('<<')
                    with self._option():
                        self._token('>>')
                    self._error('expecting one of: << >>')

        def block0():
            self._arith_expr_()
        self._closure(block0, sep=sep0)

    @graken()
    def _arith_expr_(self):

        def sep0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error('expecting one of: + -')

        def block0():
            self._term_()
        self._closure(block0, sep=sep0)

    @graken()
    def _term_(self):

        def sep0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    with self._option():
                        self._token('%')
                    with self._option():
                        self._token('//')
                    self._error('expecting one of: % * / //')

        def block0():
            self._factor_()
        self._closure(block0, sep=sep0)

    @graken()
    def _factor_(self):
        with self._choice():
            with self._option():
                self._token('+')
                self._cut()
                self._factor_()
            with self._option():
                self._token('-')
                self._cut()
                self._factor_()
            with self._option():
                self._token('~')
                self._cut()
                self._factor_()
            with self._option():
                self._power_()
            self._error('no available options')

    @graken()
    def _power_(self):
        self._atom_()

        def block0():
            self._trailer_()
        self._closure(block0)
        with self._optional():
            self._token('**')
            self._cut()
            self._factor_()

    @graken()
    def _atom_(self):
        with self._choice():
            with self._option():
                self._token('()')
            with self._option():
                self._token('(')
                self._cut()
                self._yield_expr_()
            with self._option():
                self._testlist_gexp_()
                self._token(')')
            with self._option():
                self._token('[')
                self._cut()
                with self._optional():
                    self._listmaker_()
                self._token(']')
            with self._option():
                self._token('{')
                self._cut()
                with self._optional():
                    self._dictmaker_()
                self._token('}')
            with self._option():
                self._token('`')
                self._cut()
                self._testlist_()
                self._token('`')
            with self._option():
                self._name_()
            with self._option():
                self._INT_()
            with self._option():
                self._LONGINT_()
            with self._option():
                self._FLOAT_()
            with self._option():
                self._COMPLEX_()
            with self._option():
                self._strings_()
            self._error('expecting one of: () [ {')

    @graken()
    def _strings_(self):

        def block0():
            self._string_()
        self._positive_closure(block0)

    @graken()
    def _listmaker_(self):
        self._test_()
        with self._group():
            with self._choice():
                with self._option():
                    self._list_for_()
                with self._option():

                    def block0():
                        self._token(',')
                        self._test_()
                    self._closure(block0)
                self._error('no available options')
        with self._optional():
            self._token(',')
            self._cut()

    @graken()
    def _testlist_gexp_(self):
        self._test_()
        with self._group():
            with self._choice():
                with self._option():

                    def block0():
                        self._token(',')
                        self._test_()
                    self._closure(block0)
                    with self._optional():
                        self._token(',')
                with self._option():
                    self._gen_for_()
                self._error('expecting one of: ,')

    @graken()
    def _lambdef_(self):
        self._token('lambda')
        self._cut()
        with self._optional():
            self._varargslist_()
        self._token(':')
        self._cut()
        self._test_()

    @graken()
    def _trailer_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._cut()
                with self._optional():
                    self._arglist_()
                self._token(')')
            with self._option():
                self._token('[')
                self._cut()
                self._subscriptlist_()
                self._token(']')
            with self._option():
                self._token('.')
                self._cut()
                self._name_()
            self._error('expecting one of: (')

    @graken()
    def _subscriptlist_(self):

        def sep0():
            self._token(',')

        def block0():
            self._subscript_()
        self._closure(block0, sep=sep0)
        with self._optional():
            self._token(',')
            self._cut()

    @graken()
    def _subscript_(self):
        with self._choice():
            with self._option():
                self._token('.')
                self._token('.')
                self._token('.')
                self._cut()
            with self._option():
                self._test_()
                with self._optional():
                    self._token(':')
                    self._cut()
                    with self._optional():
                        self._test_()
                    with self._optional():
                        self._sliceop_()
            with self._option():
                self._token(':')
                self._cut()
                with self._optional():
                    self._test_()
                with self._optional():
                    self._sliceop_()
            self._error('expecting one of: . :')

    @graken()
    def _sliceop_(self):
        self._token(':')
        self._cut()
        with self._optional():
            self._test_()

    @graken()
    def _exprlist_(self):

        def sep0():
            self._token(',')

        def block0():
            self._expr_()
        self._closure(block0, sep=sep0)
        with self._optional():
            self._token(',')
            self._cut()

    @graken()
    def _testlist_(self):

        def sep0():
            self._token(',')

        def block0():
            self._test_()
        self._closure(block0, sep=sep0)
        with self._optional():
            self._token(',')
            self._cut()

    @graken()
    def _dictmaker_(self):

        def sep0():
            self._token(',')

        def block0():
            self._test_()
            self._token(':')
            self._test_()
        self._closure(block0, sep=sep0)
        with self._optional():
            self._token(',')
            self._cut()

    @graken()
    def _classdef_(self):
        self._token('class')
        self._cut()
        self._name_()
        with self._optional():
            self._token('(')
            self._cut()
            with self._optional():
                self._testlist_()
            self._token(')')
        self._token(':')
        self._cut()
        self._suite_()

    @graken()
    def _arglist_(self):
        with self._choice():
            with self._option():

                def sep0():
                    self._token(',')

                def block0():
                    self._argument_()
                self._closure(block0, sep=sep0)
                with self._optional():
                    self._token(',')
                    self._token('*')
                    self._cut()
                    self._test_()
                with self._optional():
                    self._token(',')
                    self._token('**')
                    self._cut()
                    self._test_()
            with self._option():
                self._token('*')
                self._cut()
                self._test_()
                with self._optional():
                    self._token(',')
                    self._token('**')
                    self._cut()
                    self._test_()
            with self._option():
                self._token('**')
                self._cut()
                self._test_()
            self._error('no available options')

    @graken()
    def _argument_(self):
        self._test_()
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('=')
                    self._cut()
                    self._test_()
                with self._option():
                    self._gen_for_()
                self._error('no available options')

    @graken()
    def _list_iter_(self):
        with self._choice():
            with self._option():
                self._list_for_()
            with self._option():
                self._list_if_()
            self._error('no available options')

    @graken()
    def _list_for_(self):
        self._token('for')
        self._cut()
        self._exprlist_()
        self._token('in')
        self._cut()
        self._testlist_()
        with self._optional():
            self._list_iter_()

    @graken()
    def _list_if_(self):
        self._token('if')
        self._cut()
        self._test_()
        with self._optional():
            self._list_iter_()

    @graken()
    def _gen_iter_(self):
        with self._choice():
            with self._option():
                self._gen_for_()
            with self._option():
                self._gen_if_()
            self._error('no available options')

    @graken()
    def _gen_for_(self):
        self._token('for')
        self._cut()
        self._exprlist_()
        self._token('in')
        self._cut()
        self._or_test_()
        with self._optional():
            self._gen_iter_()

    @graken()
    def _gen_if_(self):
        self._token('if')
        self._cut()
        self._test_()
        with self._optional():
            self._gen_iter_()

    @graken()
    def _yield_expr_(self):
        self._token('yield')
        self._cut()
        with self._optional():
            self._testlist_()

    @graken()
    def _FLOAT_(self):
        self._pattern(r'(\.[0-9]+|[0-9]+\.[0-9]*)([Ee][0-9]+)?')

    @graken()
    def _LONGINT_(self):
        self._INT_()
        self._pattern(r'[lL]')

    @graken()
    def _INT_(self):
        self._pattern(r'0[xX][0-9a-fA-F]+|0[0-9]+|[1-9][0-9]*')

    @graken()
    def _COMPLEX_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._FLOAT_()
                with self._option():
                    self._INT_()
                self._error('no available options')
        self._pattern(r'[jJ]')

    @graken()
    def _NAME_(self):
        self._pattern(r'(?!\d)\w+')

    @graken('String')
    def _string_(self):
        self._STRING_()

    @graken()
    def _STRING_(self):
        self._pattern(r"('r'|'u'|'ur'|'f')")
        self.name_last_node('kind')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('"""')
                    self._pattern(r'([^"]|\"|""(?!")|[\r\n])*')
                    self.name_last_node('value')
                    self._token('"""')
                with self._option():
                    self._token("'''")
                    self._pattern(r"([^']|\'|''(?!')|[\r\n])*")
                    self.name_last_node('value')
                    self._token("'''")
                with self._option():
                    self._token('"')
                    self._pattern(r'([^"\n]|\")*')
                    self.name_last_node('value')
                    self._token('"')
                with self._option():
                    self._token("'")
                    self._pattern(r"([^'\n]|'')*")
                    self.name_last_node('value')
                    self._token("'")
                self._error('expecting one of: " """ \' \'\'\'')
        self.ast._define(
            ['kind', 'value'],
            []
        )

    @graken()
    def _NEWLINE_(self):
        self._pattern(r'[\u000C\r\n]+')
        self._cut()


class PythonSemantics(object):
    def start(self, ast):
        return ast

    def single_input(self, ast):
        return ast

    def file_input(self, ast):
        return ast

    def eval_input(self, ast):
        return ast

    def decorators(self, ast):
        return ast

    def decorator(self, ast):
        return ast

    def dotted_attr(self, ast):
        return ast

    def funcdef(self, ast):
        return ast

    def parameters(self, ast):
        return ast

    def varargslist(self, ast):
        return ast

    def defparameter(self, ast):
        return ast

    def fpdef(self, ast):
        return ast

    def fplist(self, ast):
        return ast

    def stmt(self, ast):
        return ast

    def simple_stmt(self, ast):
        return ast

    def small_stmt(self, ast):
        return ast

    def expr_stmt(self, ast):
        return ast

    def assigns(self, ast):
        return ast

    def assign_testlist(self, ast):
        return ast

    def assign_yield(self, ast):
        return ast

    def augassign(self, ast):
        return ast

    def print_stmt(self, ast):
        return ast

    def printlist(self, ast):
        return ast

    def del_stmt(self, ast):
        return ast

    def pass_stmt(self, ast):
        return ast

    def flow_stmt(self, ast):
        return ast

    def break_stmt(self, ast):
        return ast

    def continue_stmt(self, ast):
        return ast

    def return_stmt(self, ast):
        return ast

    def yield_stmt(self, ast):
        return ast

    def raise_stmt(self, ast):
        return ast

    def import_stmt(self, ast):
        return ast

    def import_name(self, ast):
        return ast

    def import_from(self, ast):
        return ast

    def import_as_names(self, ast):
        return ast

    def import_as_name(self, ast):
        return ast

    def dotted_as_name(self, ast):
        return ast

    def dotted_as_names(self, ast):
        return ast

    def name(self, ast):
        return ast

    def dotted_name(self, ast):
        return ast

    def global_stmt(self, ast):
        return ast

    def exec_stmt(self, ast):
        return ast

    def assert_stmt(self, ast):
        return ast

    def compound_stmt(self, ast):
        return ast

    def if_stmt(self, ast):
        return ast

    def elif_clause(self, ast):
        return ast

    def while_stmt(self, ast):
        return ast

    def for_stmt(self, ast):
        return ast

    def try_stmt(self, ast):
        return ast

    def with_stmt(self, ast):
        return ast

    def with_var(self, ast):
        return ast

    def except_clause(self, ast):
        return ast

    def suite(self, ast):
        return ast

    def INDENT(self, ast):
        return ast

    def DEDENT(self, ast):
        return ast

    def test(self, ast):
        return ast

    def or_test(self, ast):
        return ast

    def and_test(self, ast):
        return ast

    def not_test(self, ast):
        return ast

    def comparison(self, ast):
        return ast

    def comp_op(self, ast):
        return ast

    def expr(self, ast):
        return ast

    def xor_expr(self, ast):
        return ast

    def and_expr(self, ast):
        return ast

    def shift_expr(self, ast):
        return ast

    def arith_expr(self, ast):
        return ast

    def term(self, ast):
        return ast

    def factor(self, ast):
        return ast

    def power(self, ast):
        return ast

    def atom(self, ast):
        return ast

    def strings(self, ast):
        return ast

    def listmaker(self, ast):
        return ast

    def testlist_gexp(self, ast):
        return ast

    def lambdef(self, ast):
        return ast

    def trailer(self, ast):
        return ast

    def subscriptlist(self, ast):
        return ast

    def subscript(self, ast):
        return ast

    def sliceop(self, ast):
        return ast

    def exprlist(self, ast):
        return ast

    def testlist(self, ast):
        return ast

    def dictmaker(self, ast):
        return ast

    def classdef(self, ast):
        return ast

    def arglist(self, ast):
        return ast

    def argument(self, ast):
        return ast

    def list_iter(self, ast):
        return ast

    def list_for(self, ast):
        return ast

    def list_if(self, ast):
        return ast

    def gen_iter(self, ast):
        return ast

    def gen_for(self, ast):
        return ast

    def gen_if(self, ast):
        return ast

    def yield_expr(self, ast):
        return ast

    def FLOAT(self, ast):
        return ast

    def LONGINT(self, ast):
        return ast

    def INT(self, ast):
        return ast

    def COMPLEX(self, ast):
        return ast

    def NAME(self, ast):
        return ast

    def string(self, ast):
        return ast

    def STRING(self, ast):
        return ast

    def NEWLINE(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    print( 'got text', text)
    print( 'startrule', startrule)
    parser = PythonParser(parseinfo=False)
    print 'made this', parser.parse(text, startrule, filename=filename, **kwargs)
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    ast = generic_main(main, PythonParser, name='Python')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
