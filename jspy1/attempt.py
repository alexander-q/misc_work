#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import print_function, division, absolute_import, unicode_literals

from grako.objectmodel import Node
from grako.semantics import ModelBuilderSemantics


class Jspyr1ModelBuilderSemantics(ModelBuilderSemantics):
    def __init__(self):
        types = [
            t for t in globals().values()
            if type(t) is type and issubclass(t, ModelBase)
        ]
        super(Jspyr1ModelBuilderSemantics, self).__init__(types=types)


class ModelBase(Node):
    pass


class Add(ModelBase):
    def __init__(self,
                 L=None,
                 R=None,
                 op=None,
                 **_kwargs_):
        super(Add, self).__init__(
            L=L,
            R=R,
            op=op,
            **_kwargs_
        )


class Subtract(ModelBase):
    def __init__(self,
                 L=None,
                 R=None,
                 op=None,
                 **_kwargs_):
        super(Subtract, self).__init__(
            L=L,
            R=R,
            op=op,
            **_kwargs_
        )


class Multiply(ModelBase):
    def __init__(self,
                 L=None,
                 R=None,
                 op=None,
                 **_kwargs_):
        super(Multiply, self).__init__(
            L=L,
            R=R,
            op=op,
            **_kwargs_
        )


class Divide(ModelBase):
    def __init__(self,
                 L=None,
                 R=None,
                 op=None,
                 **_kwargs_):
        super(Divide, self).__init__(
            L=L,
            R=R,
            op=op,
            **_kwargs_
        )


class Number(ModelBase):
    def __init__(self, **_kwargs_):
        super(Number, self).__init__(**_kwargs_)
